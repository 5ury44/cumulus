# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import orchestrator_pb2 as orchestrator__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in orchestrator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrchestratorServiceStub(object):
    """OrchestratorService handles job submission, monitoring, and management
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitJob = channel.unary_stream(
                '/cumulus.orchestrator.OrchestratorService/SubmitJob',
                request_serializer=orchestrator__pb2.JobSubmission.SerializeToString,
                response_deserializer=orchestrator__pb2.JobEvent.FromString,
                _registered_method=True)
        self.GetJobStatus = channel.unary_unary(
                '/cumulus.orchestrator.OrchestratorService/GetJobStatus',
                request_serializer=orchestrator__pb2.JobStatusRequest.SerializeToString,
                response_deserializer=orchestrator__pb2.JobStatus.FromString,
                _registered_method=True)
        self.CancelJob = channel.unary_unary(
                '/cumulus.orchestrator.OrchestratorService/CancelJob',
                request_serializer=orchestrator__pb2.JobCancelRequest.SerializeToString,
                response_deserializer=orchestrator__pb2.CancelJobResponse.FromString,
                _registered_method=True)
        self.ListWorkers = channel.unary_unary(
                '/cumulus.orchestrator.OrchestratorService/ListWorkers',
                request_serializer=orchestrator__pb2.ListWorkersRequest.SerializeToString,
                response_deserializer=orchestrator__pb2.WorkerList.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/cumulus.orchestrator.OrchestratorService/HealthCheck',
                request_serializer=orchestrator__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=orchestrator__pb2.HealthStatus.FromString,
                _registered_method=True)


class OrchestratorServiceServicer(object):
    """OrchestratorService handles job submission, monitoring, and management
    """

    def SubmitJob(self, request, context):
        """Submit a job and stream progress/results back to client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatus(self, request, context):
        """Get the current status of a job
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelJob(self, request, context):
        """Cancel a running or pending job
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkers(self, request, context):
        """List all available GPU workers (admin endpoint)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check endpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitJob': grpc.unary_stream_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=orchestrator__pb2.JobSubmission.FromString,
                    response_serializer=orchestrator__pb2.JobEvent.SerializeToString,
            ),
            'GetJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatus,
                    request_deserializer=orchestrator__pb2.JobStatusRequest.FromString,
                    response_serializer=orchestrator__pb2.JobStatus.SerializeToString,
            ),
            'CancelJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelJob,
                    request_deserializer=orchestrator__pb2.JobCancelRequest.FromString,
                    response_serializer=orchestrator__pb2.CancelJobResponse.SerializeToString,
            ),
            'ListWorkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkers,
                    request_deserializer=orchestrator__pb2.ListWorkersRequest.FromString,
                    response_serializer=orchestrator__pb2.WorkerList.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=orchestrator__pb2.HealthCheckRequest.FromString,
                    response_serializer=orchestrator__pb2.HealthStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cumulus.orchestrator.OrchestratorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cumulus.orchestrator.OrchestratorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrchestratorService(object):
    """OrchestratorService handles job submission, monitoring, and management
    """

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cumulus.orchestrator.OrchestratorService/SubmitJob',
            orchestrator__pb2.JobSubmission.SerializeToString,
            orchestrator__pb2.JobEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cumulus.orchestrator.OrchestratorService/GetJobStatus',
            orchestrator__pb2.JobStatusRequest.SerializeToString,
            orchestrator__pb2.JobStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cumulus.orchestrator.OrchestratorService/CancelJob',
            orchestrator__pb2.JobCancelRequest.SerializeToString,
            orchestrator__pb2.CancelJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cumulus.orchestrator.OrchestratorService/ListWorkers',
            orchestrator__pb2.ListWorkersRequest.SerializeToString,
            orchestrator__pb2.WorkerList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cumulus.orchestrator.OrchestratorService/HealthCheck',
            orchestrator__pb2.HealthCheckRequest.SerializeToString,
            orchestrator__pb2.HealthStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
